h1. ScreenSteps Live User Provisioning API Ruby Wrapper

h2. Usage

This library users ActiveResource to interact with the ScreenSteps Live User Provisioning API.

To setup do the following:

<pre>
require 'sslive_provisioning'
SsliveProvisioning.account = 'youraccount'
SsliveProvisioning.user = 'username'
SsliveProvisioning.password = 'your_password'
</pre>

h3. Examples

Create a user

Required parameters: login, email, password, password_confirmation, role
role can be one of admin, author, editor, reader, api access
Optional parameters: first_name, last_name, time_zone

Pass in :send_new_user_email => "1" if you want notifcations to be sent to new users once they are created.

<pre>
SsliveProvisioning::User.create(:login => "login",
                             :email => "mail@mail.com",
                             :password => "password",
                             :password_confirmation => "password",
                             :role => "reader"
                             )
</pre>
      
quick user find options

<pre>
SsliveProvisioning::User.find_by_login(login)
SsliveProvisioning::User.find_by_email(email)
</pre>

update a user's password

<pre>
user = SsliveProvisioning::User.find_by_email('mail@mail.com')
user.update_password("newpassword")
</pre>

get readers, admins, editors, etc. for an account

<pre>
SsliveProvisioning::User.readers
SsliveProvisioning::User.api_access_users
SsliveProvisioning::User.admins
SsliveProvisioning::User.authors
SsliveProvisioning::User.editors                         
</pre>

Create a group

Required parameters: title

<pre>SsliveProvisioning::Group.create(:title => "My Group")</pre>         

Add a user to a group (must have a role of reader or api access)

<pre>
user = SsliveProvisioning::User.find_by_login("bob")
group = SsliveProvisioning::Group.find_by_title("My Group")
group.add_user(user)
</pre>

remove the user

<pre>group.remove_user(user)</pre>

Add a user to a space (must have a role of reader or api access)

<pre>
space = SsliveProvisioning::Space.find("#{id}")
space.add_user(user)
</pre>

remove the user

<pre>space.remove_user(user)</pre>

Add a group to a space

<pre>space.add_group(group)</pre>

remove the group

<pre>space.remove_group(group)</pre>

see spaces a reader or api access user can access

<pre>
user = SsliveProvisioning::User.find_by_email('mail@mail.com')
user.viewable_spaces
</pre>

see groups for a suer

<pre>user.groups</pre>

see spaces for a group

<pre>
group = SsliveProvisioning::Group.find_by_title('My Group')
group.spaces
</pre>

see users for a group

<pre>group.users</pre>